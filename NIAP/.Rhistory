library("predictionet", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(expO.colon.ras)
pert <- matrix(0, nrow=nrow(data.ras), ncol=ncol(data.ras), dimnames=dimnames(data.ras))
genen <- 259
goi <- dimnames(annot.ras)[[1]][order(abs(log2(annot.ras[ ,"fold.change"])), decreasing=TRUE)[1:genen]]
mydata <- data.ras[ , goi, drop=FALSE]
myannot <- annot.ras[goi, , drop=FALSE]
mypriors <- priors.ras[goi, goi, drop=FALSE]
View(mypriors)
kl=which(as.vector(mypriors)>0)
mynet <- netinf(data=mydata, perturbations=mypert, priors=mypriors, priors.count=TRUE, priors.weight=0.5, maxparents=3, method="regrnet", seed=54321)
mypert <- pert[ , goi, drop=FALSE]
mynet <- netinf(data=mydata, perturbations=mypert, priors=mypriors, priors.count=TRUE, priors.weight=0.5, maxparents=3, method="regrnet", seed=54321)
mytopo <- mynet$topology
View(mytopo)
install.packages("dynamicTreeCut")
library("igraph", lib.loc="C:/Program Files/R/R-3.1.1/library")
g <- sample_gnp(100, 0.3)
g <- sample_gnp(100, 0.3)
clique_num(g)
cliques(g, min=6)
largest_cliques(g)
largest_cliques(g)
g <- sample_gnp(100, 0.03)
max_cliques(g)
library("c3net", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(expdata)
data(truenet)
expdata <- copula(expdata)
mim <- makemim(expdata)
Ic <- 2
mim[mim < Ic] <-0
net <- c3(mim)
View(net)
scores <- checknet(net,truenet)
checknet
install.packages("arules")
data("Adult")
library("arules", lib.loc="C:/Program Files/R/R-3.1.1/library")
data("Adult")
rules <- apriori(Adult,
parameter = list(supp = 0.5, conf = 0.9, target = "rules"))
summary(rules)
library("ganet", lib.loc="C:/Program Files/R/R-3.1.1/library")
ganet.ComLinks
tcga <- read.table("D:/rna-seq/prostate_data/all_data/tcga.txt", header=TRUE, quote="\"")
View(tcga)
log_tcga=log(tcga+1)
write.table(log_tcga,"log_tcga.txt")
cor
?COR
?cor
library("c3net", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(expdata)
mim=makemim(expdata);
srted=sort(mim,decreasing=TRUE)
mythreshold=srted[120];
View(mim)
mim[mim <mythreshold ]=0
View(mim)
kl=which(mim>0)
kl=which(mim>0,arr.ind=TRUE)
View(kl)
mim2 <- makemim(expdata)
Ic <- mean(mim[upper.tri(mim)])
upper.tri(mim2)=0
View(mim2)
mim2[lower.tri(mim2)] <-0
View(mim2)
?cor
source('C:/Program Files/RStudio/workspace/makale3/inferNet2BinaryFormat.R')
source('C:/Program Files/RStudio/workspace/makale3/inferNet2BinaryFormat.R')
source('C:/Program Files/RStudio/workspace/makale3/inferNet2BinaryFormat.R')
source('C:/Program Files/RStudio/workspace/makale3/inferNet2BinaryFormat.R')
source('C:/Program Files/RStudio/workspace/makale3/inferNet2BinaryFormat.R')
source('C:/Program Files/RStudio/workspace/makale3/inferNet2BinaryFormat.R')
source('C:/Program Files/RStudio/workspace/makale3/buildNetworkbyARules.R')
source('C:/Program Files/RStudio/workspace/makale3/buildNetworkbyARules.R')
library("lc3net", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(dataset)
data(annotation)
res <- lc3net (dataset,annotation,mim=NULL, cop=TRUE, alphaRN=0.001,rankRN=40,methodRN="rank",alphaC3NET=0.005,rankC3NET=1,methodC3NET="alpha",itnum=1, ppi=TRUE,pathwayppi=TRUE,externalData=NULL,network=FALSE)
library("minet", lib.loc="C:/Program Files/R/R-3.1.1/library")
source('D:/rna-seq/ensemble.R')
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(prostateData)
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
install.packages("C:/Users/özgür-pc/Desktop/ARNetMiT_0.1.tar.gz", repos = NULL, type = "source")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("GAnet", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("RedeR", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("hash", lib.loc="C:/Program Files/R/R-3.1.1/library")
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
buildNetworkbyARules
data(prostateData)
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
net <- res$finalNetwork
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="mean", directed=FALSE)
net2 <- res$finalNetwork
View(net2)
View(net)
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data( diseaseMirnaData )
k=diseaseMirnaData
View(k)
a=unique(k)
a=unique(k[,1])
buildNetworkbyARules
library("WGCNA", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(prostateData)
data(prostateData)
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
detach("package:GAnet", unload=TRUE)
library("GAnet", lib.loc="C:/Program Files/R/R-3.1.1/library")
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
install.packages("C:/Users/özgür-pc/Desktop/GAnet_1.0.tar.gz", repos = NULL, type = "source")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("GAnet", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("hash", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("RedeR", lib.loc="C:/Program Files/R/R-3.1.1/library")
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
install.packages("C:/Users/özgür-pc/Desktop/ganet_2.0.tar.gz", repos = NULL, type = "source")
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
install.packages("C:/Users/özgür-pc/Desktop/GAnet_1.0.tar.gz", repos = NULL, type = "source")
library("GAnet", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("hash", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("RedeR", lib.loc="C:/Program Files/R/R-3.1.1/library")
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(prostateData)
data(prostateData)
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", directed=FALSE)
m4 <- matrix(sample(0:1,r*c, replace=TRUE),r,c)
r=100
c=100
m4 <- matrix(sample(0:1,r*c, replace=TRUE),r,c)
install.packages("entropy")
disc=discretize2d(m4)
library("entropy", lib.loc="C:/Program Files/R/R-3.1.1/library")
disc=discretize2d(m4)
disc=discretize(m4)
disc=discretize(m4,2)
mutualInfo=mi.empirical(disc)
disc=discretize(m4,16)
mutualInfo=mi.empirical(disc)
detach("package:entropy", unload=TRUE)
?COR
?cor
Cl <- cor(longley))
(Cl <- cor(longley))
ab=cor(m4)
View(ab)
cor
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data( prostateData )
k=prostateData
xy= table(k)
xy=asm.matrix(xy)
xy=as.matrix(xy)
xy=as.data.frame(table(k))
View(xy)
xy2=t(xy)
View(xy2)
View(xy2)
x <- c(-1 , 0, 1)
y <- 1 : 4
(M <- mesh(x, y))
a <- table(k)
?table
+
+*7
+*7
require(stats)
table(rpois(100, 5))
?rpois
?table
?with
?with
?mesh
xy2[1,1]
kj=xy2[]
kj=xy2[,2:3]
kj=xy2[2:3,]
rownames(kj)=c(xy2[1,]
)
rownames(kj)=xy2[1,]
?lapply
km=lapply(xy, t())
km=lapply(xy, t)
km=as.matrix(km)
View(km)
av=replicate(xy)
av=simplify2array(xy)
View(av)
av=expand.grid(xy)
av=expand.grid(as.matrix(xy))
View(av)
View(k)
View(xy)
genes=unique(xy[,2])
juke=which(genes %in% xy[,2])
juke=which(c(genes) %in% as.matrix(xy[,2]))
juke=which(genes %in% as.matrix(xy[,2]))
juke=which(as.matrix(genes) %in% as.matrix(xy[,2]))
juke=which(as.matrix(xy[,2]) %in% as.matrix(genes))
juke=as.matrix(juke)
View(juke)
juke=which(as.matrix(xy[,2])==as.matrix(genes))
juke=which(as.matrix(xy[,2])= as.matrix(genes))
juke=which(as.matrix(xy[,2])==genes)
juke=which(as.matrix(xy[,2])%in% genes)
juke=which(xy[,2]%in% genes)
?%in%
?find
juke=which(as.matrix(xy[,2])%in% as.matrix(genes))
gbh=which(as.matrix(xy[,2])%in% as.matrix(genes))
genes=as.matrix(genes)
View(genes)
class(genes[1])
km=as.matrix(xy[,2])
View(km)
juke=which(km==genes)
View(prostateData)
View(km)
juke=which(as.character(km)==genes)
juke=which(as.character(km)%in% as.character(genes))
a=as.character(km)
b=as.character(genes)
nrow(genes)
ncol(genes)
nrow(km)
View(genes)
gn=c(genes)
kk=c(km)
jlk=whick(kk%in%gn)
jlk=which(kk%in%gn)
View(xy)
kk=which(as.matrix(xy[,2]=="A1LCF"))
kk=which(as.matrix(xy[,2])=="A1LCF"))
kk=which(as.matrix(xy[,2])=="A1LCF")
kk=which(as.matrix(xy[,2])=="A1CF")
kk=which(as.matrix(xy[,2])=="AAK1")
kk=which("AAK1"==as.matrix(xy[,2]))
kk=which(as.matrix(xy[,2])==as.matrix(unique(xy[,2]))
)
kk=which(as.matrix(xy[,2])==unique(xy[,2]))
kk=which(as.matrix(xy[,2])==as.character(unique(xy[,2])))
kk=which(as.matrix(xy[,2])%in%as.character(unique(xy[,2])))
?unique
kk=which(as.matrix(xy[,2])==as.character(unique(xy[,2])))
kkk=sort(kk)
View(xy)
kk=which(as.character(unique(xy[,2]))==as.matrix(xy[,2]))
kk=which(as.matrix(xy[,2])==as.character(unique(xy[,2])),arr.ind=TRUE)
View(kk)
kk=which(as.matrix(xy[,2])==as.matrix(unique(xy[,2])),arr.ind=TRUE)
kk=which(as.matrix(xy[,2]) %in% as.matrix(unique(xy[,2])),arr.ind=TRUE)
genes=as.matrix(unique(xy[,2])
)
xy[1,2]
as.character(xy[1,2])
kk[1]
genes[1]
kk=which(as.character(as.matrix(xy[,2])) %in% as.matrix(unique(xy[,2])),arr.ind=TRUE)
kk=which(as.character(as.matrix(xy[,2])) %in% as.matrix(unique(xy[,2])))
kk=which(as.character(as.matrix(xy[1:nrow(xy),2])) %in% genes)
kk=as.matrix(kk)
View(kk)
kk[2755]
kk[2756]
kk[2757]
remove.packages(ARNetMiT)
remove.packages(ARNetMiT,lib)
install.packages("C:/Users/özgür-pc/Desktop/ARNetMiT_0.2.tar.gz", repos = NULL, type = "source")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(prostateData)
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", filtering="s")
buildNetworkbyARules(dataset,support,confidenceVal,supportType="rank", filtering="s")
buildNetworkbyARules(dataset,support,confidenceVal,supportType="rank", filtering="s")
.libPaths()
remove.packages("ARNetMiT")
remove.packages("ARNetMiT",.libPaths())
remove.packages("ARNetMiT",lib)
install.packages("C:/Users/özgür-pc/Desktop/ARNetMiT_0.2.tar.gz", repos = NULL, type = "source")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("GAnet", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("RedeR", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("hash", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(prostateData)
res <- buildNetworkbyARules(prostateData,0.3,0.5,supportType="rank", filtering="s")
net <- res$finalNetwork
table=buildmiRNATargetTable(prostateData)
View(table)
remove.packages("ARNetMiT")
install.packages("C:/Users/özgür-pc/Desktop/ARNetMiT_0.2.tar.gz", repos = NULL, type = "source")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
detach("package:ARNetMiT", unload=TRUE)
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
colon= createMirnaListfromDisease(mirnaGeneData,diseaseMirnaData,disease,7);
table=buildmiRNATargetTable(colon)
View(table)
buildmiRNATargetTable
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(prostateData)
k=prostateData
View(k)
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(mirnaGeneData)
data(diseaseMirnaData)
data(disease)
k=disease
View(k)
colon= createMirnaListfromDisease(mirnaGeneData,diseaseMirnaData,disease,7);
View(colon)
temp=unique(as.matrix(colon[,1]))
temp2=unique(as.matrix(colon[,2]))
breast= createMirnaListfromDisease(mirnaGeneData,diseaseMirnaData,disease,3);
temp3=unique(as.matrix(breast[,1]))
temp4=unique(as.matrix(breast[,2]))
?plot
require(stats)
plot(cars)
plot(cars)
plot(cars)
plot(cars)
source('C:/Program Files/RStudio/workspace/important_R_codes/integrationPhase.R')
source('C:/Program Files/RStudio/workspace/important_R_codes/integrationPhase.R')
library("biomaRt", lib.loc="C:/Program Files/R/R-3.1.1/library")
getBM
library("igraph", lib.loc="C:/Program Files/R/R-3.1.1/library")
g2 <- sample_gnp(1000, 10/1000)
degree(g2)
?sample_gnm
g2 <- sample_gnp(20, 30)
g2 <- sample_gnp(20, 10)
g2 <- sample_gnp(20, 50)
g2 <- sample_gnp(20, 20)
g <- sample_gnm(1000, 1000)
?sample_gnm
g2 <- sample_gnm(20, 30)
degree(g2)
degree_distribution(g2)
degree = 1:max(g2)
degree = 1:max(degree(g2))
degree
source.with.encoding('C:/Program Files/RStudio/workspace/prostate/calculateRSquare.R', encoding='UTF-8')
kl=degree_distribution(g2)
probability = kl[-1]
probability
reg = lm(log(probability) ~ log(degree))
cozf = coef(reg)
?lm
cozf[[1]]
cozf[[2]]
lm(log(probability) ~ log(degree))
plot(lm(log(probability) ~ log(degree)))
plot(lm(log(probability) ~ log(degree)), las=1)
summary(reg)
?lm
plot(lm(log(probability) ~ log(degree)), las=1)
library("gProfileR", lib.loc="C:/Program Files/R/R-3.1.1/library")
gprofiler(c("Klf4", "Pax5", "Sox2", "Nanog"), organism = "mmusculus")
library("edgeR", lib.loc="C:/Program Files/R/R-3.1.1/library")
calcNormFactors()
calcNormFactors
?chisq.test
chisq.test
?outer
paste("ab","cd")
paste("ab","cd",sep="")
"ab"+"cd"
library("ARNetMiT", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(prostateData)
kprostateData
k=prostateData
View(prostateData)
lk=unique(k[,2])
lk2=as.matrix(lk)
View(lk2)
data( disease )
a=disease
View(a)
z=data(mirnaGeneData)
z=mirnaGeneData
View(z)
data( diseaseMirnaData )
n=diseaseMirnaData
View(n)
breast= createMirnaListfromDisease(mirnaGeneData,diseaseMirnaData,disease,3);
View(breast)
ttn=unique(breast[,2])
tt2=as.matrix(unique(breast[,2]))
setwd("~/RWS/GNIA")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
topologyFitnessValues <- calculateTopologicalFitness(mypath="networks")
data(omim)
res <- topologicalBiologicalEvaluation(mypath="networks",omim)
res <- NIAP::topologicalBiologicalEvaluation(mypath="networks",omim)
detach("package:NIAP", unload=TRUE)
remove.packages("NIAP")
install.packages("C:/Users/özgür-pc/Desktop/IET/NIAP_VERSIONS/7_9_16_29/NIAP_1.0.tar.gz", repos = NULL, type = "source")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
detach("package:NIAP", unload=TRUE)
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(dataset)
data(annotation)
geneNetwork <- networkInference(dataset,annotation,gnimethod="c3net")
sessionInfo
sessionInfo("NIAP")
networkInference
help.search(networkInference)
help.search("networkInference.R")
help.search("networkInference")
geneNetwork <- networkInference(dataset,annotation,gnimethod="c3net")
geneNetwork <- networkInference(dataset,annotation,gnimethod="c3net")
remove.packages("NIAP")
install.packages("C:/Program Files/RStudio/workspace/NIAP_1.0.tar.gz", repos = NULL, type = "source")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
rm(annotation)
rm(dataset)
data(dataset)
data(annotation)
geneNetwork <- networkInference(dataset,annotation,gnimethod="c3net")
load(ppi)
data(ppi)
View(ppi)
remove.packages("NIAP")
install.packages("C:/Program Files/RStudio/workspace/NIAP_1.0.tar.gz", repos = NULL, type = "source")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
data(omim)
res <- topologicalBiologicalEvaluation(mypath="networks",omim)
topologicalResults= res$topological
biologicalAnalyisResults=res$biolEval
View(biologicalAnalyisResults)
topologicalResults= res$topological
View(topologicalResults)
getwd()
setwd("C:/Program Files/RStudio/workspace/NIAP")
res <- topologicalBiologicalEvaluation(mypath="networks",omim)
choose.dir(default = "", caption = "Select folder")
km=choose.dir(default = "", caption = "Select folder")
source('C:/Program Files/RStudio/workspace/NIAP/R/literatureOverlapAnalysis.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/literatureOverlapAnalysis.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/literatureOverlapAnalysis.R')
data(ppi)
data(annotation)
source('C:/Program Files/RStudio/workspace/NIAP/R/literatureOverlapAnalysis.R')
exx=literatureOverlapAnalysis(ppi,annotation)
source('C:/Program Files/RStudio/workspace/NIAP/R/literatureOverlapAnalysis.R')
exx=literatureOverlapAnalysis(ppi,annotation)
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
nbh=literatureOverlapAnalysis(ppi,annotation)
View(nbh)
nbh=literatureOverlapAnalysis(ppi,annotation)
source('C:/Program Files/RStudio/workspace/NIAP/R/topologicalBiologicalEvaluation.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/literatureOverlapAnalysis.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/topologicalBiologicalEvaluation.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/topologicalBiologicalEvaluation.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/topologicalBiologicalEvaluation.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/calculateTopologicalFitness.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/calculateTopologicalFitness.R')
source('C:/Program Files/RStudio/workspace/NIAP/R/calculateTopologicalFitness.R')
data(omim)
rsltss=topologicalBiologicalEvaluation(mypath="",omim)
ab=rsltss$biolEval
cd=rsltss$topological
View(cd)
View(ab)
rsltss=topologicalBiologicalEvaluation(mypath="",omim)
cd=rsltss$topological
ab=rsltss$biolEval
View(ab)
View(ab)
rsltss=topologicalBiologicalEvaluation(mypath="",omim)
ab=rsltss$biolEval
cd=rsltss$topological
View(ab)
rsltss=topologicalBiologicalEvaluation(mypath="",omim)
ab=rsltss$biolEval
cd=rsltss$topological
View(ab)
calculateTopologicalFitness(mypath="")
nbh=literatureOverlapAnalysis(ppi,annotation)
View(nbh)
load_all()
library("devtools", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("roxygen2", lib.loc="C:/Program Files/R/R-3.1.1/library")
load_all()
library(NIAP)
library(NIAP)
library("devtools", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("roxygen2", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
load_all()
library(NIAP)
library("devtools", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("NIAP", lib.loc="C:/Program Files/R/R-3.1.1/library")
library(NIAP)
devtools::install_github(“ozgurcingiz/NIAP”)
install_github(“ozgurcingiz/NIAP”)
devtools::install_github(“ozgurcingiz/NIAP”)
library("devtools", lib.loc="C:/Program Files/R/R-3.1.1/library")
devtools::install_github(“ozgurcingiz/NIAP”)
install_github(“ozgurcingiz/NIAP”)
devtools::install_github(“ozgurcingiz/NIAP”)
