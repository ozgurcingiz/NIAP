{
    "contents" : "#'@export\ntopologicalBiologicalEvaluation <- function (mypath=\"\",omim)\n{\n  #library(ProNet);\n  #library(igraph);\n  #library(gProfileR);\n  \n  #mypath=paste(getwd(),\"/\",mypath,sep=\"\");\n  \n  mypath=choose.dir(default = \"\", caption = \"Select folder\")\n  \n  res <- new.env();\n  file_list=list.files(path = mypath, pattern = NULL, all.files = TRUE,full.names = TRUE, recursive = TRUE,ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE);\n  fileCount=length(file_list);\n  fault=FALSE;\n  ################################## BIOMART OMIM GENE LIST #####################3\n  omim=as.vector(as.matrix(omim));\n  \n  \n  # ensembl = useMart(\"ENSEMBL_MART_ENSEMBL\",dataset=\"hsapiens_gene_ensembl\", host=\"www.ensembl.org\");\n  ###############################\n  #   ensembl = useMart(biomart=\"ENSEMBL_MART_ENSEMBL\", host=\"grch37.ensembl.org\", path=\"/biomart/martservice\" ,dataset=\"hsapiens_gene_ensembl\");\n  #   gtruthOmim=getBM(attributes=c(\"goslim_goa_accession\",\"goslim_goa_description\"),filters=\"hgnc_symbol\",values=omim, mart=ensembl);\n  #   tempIndice=which(as.matrix(gtruthOmim[,1])!=\"\" & as.matrix(gtruthOmim[,2])!=\"\"); # 86 TANE GO SLIM CIKARIYOR\n  #   gtruthOmim=gtruthOmim[tempIndice,];\n  #   allGoTermsNo=nrow(gtruthOmim);\n  ####################################################### gProfileR based GSEA ###########################\n  gtruthOmim=gprofiler(omim, organism = \"hsapiens\",correction_method=\"bonferroni\");\n  #gtruthOmim=gprofiler(omim, organism = \"hsapiens\",correction_method=\"bonferroni\");\n  gtruthOmim= as.matrix(gtruthOmim[,9]);\n  allGoTermsNo=nrow(gtruthOmim);\n  \n  ######################################################################################\n  #wholeInfo=matrix(data=NA,nrow=50000,ncol=11);\n  wholeInfo=matrix(data=NA,nrow=50000,ncol=9);\n  topologicInfo=matrix(data=NA,nrow=fileCount,ncol=7);\n  counter=0;\n  subnetCount=1;\n  \n  for (file in file_list)    \n  {\n    \n    counter=counter+1;\n    \n    #temp_dataset <-read.table(file, header=TRUE, quote=\"\\\"\"); # temp_dataset <-read.table(file, header=TRUE, sep=\"\\t\");\n    \n    ############################ RDA FILES READING ###############\n    #file_name=basename(file);\n    \n    #full_name=paste(mypath,\"/\",file_name,sep=\"\")\n    #jName=substr(file_name,1,nchar(file_name)-4)\n    \n    #load(file=full_name) \n    \n    \n    #temp_dataset=get(jName)\n    \n    ############################ text FILES READING ###############\n    \n    temp_dataset <-read.table(file, header=TRUE, quote=\"\\\"\"); # temp_dataset <-read.table(file, header=TRUE, sep=\"\\t\");\n    \n    #############\n    \n    if(nrow(temp_dataset)==0) next;\n    file_name=basename(file);\n    mypath=dirname(file);\n   \n    \n    #file_data=as.vector(as.matrix(temp_dataset));\n    G <- graph.data.frame(temp_dataset,directed=FALSE);\n    # A<-as_adjacency_matrix(G,type=\"both\",names=TRUE,sparse=FALSE,attr=NULL); # ONEMLIIIII\n    \n    ##########################################TOPOLOGICAL FEATURE EXTRACTION #####################\n    \n    topVal=topology_simple(G);\n    \n    numNode=topVal[1][[1]];\n    numEdge=topVal[2][[1]];\n    avgNumNeigh=topVal[6][[1]];\n    diamet= topVal[8][[1]];\n    density= topVal[9][[1]];\n    cluscoef=topVal[10][[1]];\n    \n    topologicInfo[counter,1]= file_name;\n    topologicInfo[counter,2]= numNode;\n    topologicInfo[counter,3]= numEdge;\n    topologicInfo[counter,4]= avgNumNeigh;\n    topologicInfo[counter,5]= diamet;\n    topologicInfo[counter,6]= density;\n    topologicInfo[counter,7]= cluscoef;\n    \n    colnames(topologicInfo)=c(\"file_name\",\"numNode\",\"numEdge\",\"avgNumNeigh\",\"diamet\",\"density\",\"cluscoef\");\n    \n    \n    \n    # myDegree<-topology_degree(G,power.law=TRUE);\n    \n    \n    \n    ##############################################################################################\n    \n    # myFlag=TRUE;\n    \n    result<- tryCatch(mcode(G,vwp=0.005,haircut=TRUE,fluff=FALSE,fdt=0.8,loops=FALSE),finally=print(''), error= function(err) NULL)\n    \n    #        result <- mcode(G,vwp=0.1,haircut=TRUE,fluff=FALSE,fdt=0.8,loops=FALSE);\n    #        print(\"okk11111\");\n    #     }, error= function(err)\n    #     {\n    #       myFlag=FALSE;\n    #       #next;\n    #  });\n    if(is.null(result))\n    {\n      next;\n    }\n    \n    #print(\"ooooookkk\");\n    \n    #result <- mcode(G,vwp=0.1,haircut=TRUE,fluff=FALSE,fdt=0.8,loops=FALSE);\n    temp=result$COMPLEX;\n    number_of_subnet=length(temp);\n    \n    \n    tempCounter=0;\n    \n    \n    \n    for(i in 1:number_of_subnet)\n    {\n      \n      \n      #tempCounter=tempCounter+1;\n      cluster1<-induced.subgraph(G,result$COMPLEX[[i]]); \n      mygenes=V(cluster1)$name;\n      file_data=as.vector(mygenes);\n      file_data <- file_data[grep(\"^[A-Za-z0-9]+$\", file_data, perl=TRUE)];\n      \n     # print(length(file_data));\n      if(length(file_data)<3 | length(file_data)>500 ) next;\n      \n      \n      \n      tempCounter=tempCounter+1;\n      \n      tryCatch(  #fault = tryCatch(\n{  \n  ############# biomart ############\n  #       gtruthFile=getBM(attributes=c(\"goslim_goa_accession\",\"goslim_goa_description\"),filters=\"hgnc_symbol\",values=file_data, mart=ensembl);\n  #       tempIndice=which(as.matrix(gtruthFile[,1])!=\"\" & as.matrix(gtruthFile[,2])!=\"\");\n  #       gtruthFile=gtruthFile[tempIndice,]; # inferred go terms of file\n  #       allEstimations=nrow(gtruthFile);\n  \n  ##############gProfileR GSEA #############\n  gtruthFile=gprofiler(file_data, organism = \"hsapiens\",correction_method=\"bonferroni\");\n  #gtruthFile=gprofiler(file_data, organism = \"hsapiens\",correction_method=\"bonferroni\");\n  gtruthFile= as.matrix(gtruthFile[,9]);\n  allEstimations=nrow(gtruthFile);\n  overlapTerms=which(as.matrix(gtruthFile[,1]) %in% as.matrix(gtruthOmim[,1]));\n  \n  \n  \n  tp=length(overlapTerms); # number of TP\n  fp=allEstimations-tp;\n  fn= allGoTermsNo- tp;\n  #print(tp)\n  #print(\"okkkkkkkkkkkkkkkkk\")\n  \n  prec= tp / allEstimations;\n  prec=as.numeric(prec);\n  rec= tp / (tp+fn);\n  rec=as.numeric(rec);\n  fmeasure= (2*rec*prec)/ (rec+prec);\n  \n  wholeInfo[subnetCount,1]=file_name;\n  wholeInfo[subnetCount,2]=mypath;\n  # wholeInfo[counter,2]=fin$precision;\n  #wholeInfo[subnetCount,3]=length(file_data); # shows how many genes in which group contains\n  #wholeInfo[subnetCount,4]= counter;\n  #wholeInfo[subnetCount,5]= tempCounter;\n  wholeInfo[subnetCount,3]=tp;\n  wholeInfo[subnetCount,4]=fp;\n  wholeInfo[subnetCount,5]=fn;\n  wholeInfo[subnetCount,6]=prec;\n  wholeInfo[subnetCount,7]=rec;\n  wholeInfo[subnetCount,8]=fmeasure; # 11_subat_coomentli_ilk_hali\n  wholeInfo[subnetCount,9]= length(file_data);\n  \n  subnetCount=subnetCount+1;\n  # fault=FALSE;\n  # return (fault);\n  \n}, error= function(err)\n{\n  #return (res);\n  assign(\"biolEval\", wholeInfo, envir = res);\n  assign(\"topological\", topologicInfo, envir = res);\n  return (res);\n  #fault=TRUE;\n  \n}\n      )\n\n#print(fmeasure);\n\n#       if(fault==TRUE) \n#       {\n#         assign(\"biolEval\", wholeInfo, envir = res);\n#         assign(\"topological\", topologicInfo, envir = res);\n#         return (res);\n#       }\n#       \n\n    }    \n\n#print(\"#####\");\n#print(counter);\n\n  }\ncolnames(wholeInfo)=c(\"file_name\",\"path\",\"tp\",\"fp\",\"fn\",\"prec\",\"rec\",\"f_measure\",\"genesInGroup\");\nind=which(is.na(wholeInfo[,1])==FALSE);\nwholeInfo=wholeInfo[ind,];\n#res <- new.env();\n#   if(fault==FALSE)\n#   {\nassign(\"biolEval\", wholeInfo, envir = res);\nassign(\"topological\", topologicInfo, envir = res);\n\n#rm(list = setdiff(ls(), lsf.str()))\n\nreturn (res);  \n#}\n\n\n\n}",
    "created" : 1567639540073.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4174558629",
    "id" : "52FD13AE",
    "lastKnownWriteTime" : 1567890385,
    "path" : "C:/Program Files/RStudio/workspace/NIAP/R/topologicalBiologicalEvaluation.R",
    "project_path" : "R/topologicalBiologicalEvaluation.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}